
traffic_light_on_demand.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c28  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000c9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800060  00800060  00000c9c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c9c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ccc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00000d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013b5  00000000  00000000  00000e38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c1  00000000  00000000  000021ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ac8  00000000  00000000  00002aae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a4  00000000  00000000  00003578  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006c6  00000000  00000000  0000381c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000076f  00000000  00000000  00003ee2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00004651  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 2a 01 	jmp	0x254	; 0x254 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a9 36       	cpi	r26, 0x69	; 105
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 99 01 	call	0x332	; 0x332 <main>
  74:	0c 94 12 06 	jmp	0xc24	; 0xc24 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <APP_init>:
	
	
}

void APP_init(void)
{
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	00 d0       	rcall	.+0      	; 0x82 <APP_init+0x6>
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
	/*initialize the Led pins*/
	DIO_INIT(PA,0,OUTPUT);
  86:	41 e0       	ldi	r20, 0x01	; 1
  88:	60 e0       	ldi	r22, 0x00	; 0
  8a:	81 e4       	ldi	r24, 0x41	; 65
  8c:	0e 94 a0 01 	call	0x340	; 0x340 <DIO_INIT>
	DIO_INIT(PA,1,OUTPUT);
  90:	41 e0       	ldi	r20, 0x01	; 1
  92:	61 e0       	ldi	r22, 0x01	; 1
  94:	81 e4       	ldi	r24, 0x41	; 65
  96:	0e 94 a0 01 	call	0x340	; 0x340 <DIO_INIT>
	DIO_INIT(PA,2,OUTPUT);
  9a:	41 e0       	ldi	r20, 0x01	; 1
  9c:	62 e0       	ldi	r22, 0x02	; 2
  9e:	81 e4       	ldi	r24, 0x41	; 65
  a0:	0e 94 a0 01 	call	0x340	; 0x340 <DIO_INIT>
	
	DIO_INIT(PB,0,OUTPUT);
  a4:	41 e0       	ldi	r20, 0x01	; 1
  a6:	60 e0       	ldi	r22, 0x00	; 0
  a8:	82 e4       	ldi	r24, 0x42	; 66
  aa:	0e 94 a0 01 	call	0x340	; 0x340 <DIO_INIT>
	DIO_INIT(PB,1,OUTPUT);
  ae:	41 e0       	ldi	r20, 0x01	; 1
  b0:	61 e0       	ldi	r22, 0x01	; 1
  b2:	82 e4       	ldi	r24, 0x42	; 66
  b4:	0e 94 a0 01 	call	0x340	; 0x340 <DIO_INIT>
	DIO_INIT(PB,2,OUTPUT);
  b8:	41 e0       	ldi	r20, 0x01	; 1
  ba:	62 e0       	ldi	r22, 0x02	; 2
  bc:	82 e4       	ldi	r24, 0x42	; 66
  be:	0e 94 a0 01 	call	0x340	; 0x340 <DIO_INIT>
	/***************************************************************/
	/*initialize the starting led process will be low */
	DIO_WRITE(PA,0,LOW);
  c2:	40 e0       	ldi	r20, 0x00	; 0
  c4:	60 e0       	ldi	r22, 0x00	; 0
  c6:	81 e4       	ldi	r24, 0x41	; 65
  c8:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_WRITE>
	DIO_WRITE(PA,1,LOW);
  cc:	40 e0       	ldi	r20, 0x00	; 0
  ce:	61 e0       	ldi	r22, 0x01	; 1
  d0:	81 e4       	ldi	r24, 0x41	; 65
  d2:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_WRITE>
	DIO_WRITE(PA,2,LOW);
  d6:	40 e0       	ldi	r20, 0x00	; 0
  d8:	62 e0       	ldi	r22, 0x02	; 2
  da:	81 e4       	ldi	r24, 0x41	; 65
  dc:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_WRITE>
	
	DIO_WRITE(PB,0,LOW);
  e0:	40 e0       	ldi	r20, 0x00	; 0
  e2:	60 e0       	ldi	r22, 0x00	; 0
  e4:	82 e4       	ldi	r24, 0x42	; 66
  e6:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_WRITE>
	DIO_WRITE(PB,1,LOW);
  ea:	40 e0       	ldi	r20, 0x00	; 0
  ec:	61 e0       	ldi	r22, 0x01	; 1
  ee:	82 e4       	ldi	r24, 0x42	; 66
  f0:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_WRITE>
	DIO_WRITE(PB,2,LOW);
  f4:	40 e0       	ldi	r20, 0x00	; 0
  f6:	62 e0       	ldi	r22, 0x02	; 2
  f8:	82 e4       	ldi	r24, 0x42	; 66
  fa:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_WRITE>
	/****************************************************************/
	ENABLE_EXTERNAL_INTERRUPT(INTERRUPT0,FALLING_EDGE);
  fe:	61 e0       	ldi	r22, 0x01	; 1
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	0e 94 cb 02 	call	0x596	; 0x596 <ENABLE_EXTERNAL_INTERRUPT>
	Enable_global_INT();
 106:	0e 94 2f 03 	call	0x65e	; 0x65e <Enable_global_INT>
	
	Timer0_ConfigType config_TIMER0 = {NORMAL_MODE,F_CPU_1024};
 10a:	19 82       	std	Y+1, r1	; 0x01
 10c:	85 e0       	ldi	r24, 0x05	; 5
 10e:	8a 83       	std	Y+2, r24	; 0x02
	TIMER0_init(&config_TIMER0);
 110:	ce 01       	movw	r24, r28
 112:	01 96       	adiw	r24, 0x01	; 1
 114:	0e 94 33 03 	call	0x666	; 0x666 <TIMER0_init>
	
}
 118:	0f 90       	pop	r0
 11a:	0f 90       	pop	r0
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	08 95       	ret

00000122 <clear_all_car_leds>:
		car_yellow_op();
	}
	
	void clear_all_car_leds(void)
	{
		DIO_WRITE(PA,0,LOW);
 122:	40 e0       	ldi	r20, 0x00	; 0
 124:	60 e0       	ldi	r22, 0x00	; 0
 126:	81 e4       	ldi	r24, 0x41	; 65
 128:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_WRITE>
		DIO_WRITE(PA,1,LOW);
 12c:	40 e0       	ldi	r20, 0x00	; 0
 12e:	61 e0       	ldi	r22, 0x01	; 1
 130:	81 e4       	ldi	r24, 0x41	; 65
 132:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_WRITE>
		DIO_WRITE(PA,2,LOW);
 136:	40 e0       	ldi	r20, 0x00	; 0
 138:	62 e0       	ldi	r22, 0x02	; 2
 13a:	81 e4       	ldi	r24, 0x41	; 65
 13c:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_WRITE>
 140:	08 95       	ret

00000142 <car_green_op>:
	}
	
	void car_green_op(void)
	{
		DIO_WRITE(PA,0,HIGH);
 142:	41 e0       	ldi	r20, 0x01	; 1
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	81 e4       	ldi	r24, 0x41	; 65
 148:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_WRITE>
		green_car_flag=1;
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <green_car_flag>
		
		TIMER0_Delay_ms(5000000);
 152:	60 e4       	ldi	r22, 0x40	; 64
 154:	7b e4       	ldi	r23, 0x4B	; 75
 156:	8c e4       	ldi	r24, 0x4C	; 76
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 a5 03 	call	0x74a	; 0x74a <TIMER0_Delay_ms>
		green_car_flag=0;
 15e:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <green_car_flag>
		DIO_WRITE(PA,0,LOW);
 162:	40 e0       	ldi	r20, 0x00	; 0
 164:	60 e0       	ldi	r22, 0x00	; 0
 166:	81 e4       	ldi	r24, 0x41	; 65
 168:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_WRITE>
 16c:	08 95       	ret

0000016e <car_yellow_op>:
		
	}
	
	void car_yellow_op(void)
	{
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
		DIO_WRITE(PA,2,LOW);
 172:	40 e0       	ldi	r20, 0x00	; 0
 174:	62 e0       	ldi	r22, 0x02	; 2
 176:	81 e4       	ldi	r24, 0x41	; 65
 178:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_WRITE>
		for(int yellow_led=0;yellow_led<10;yellow_led++)
 17c:	c0 e0       	ldi	r28, 0x00	; 0
 17e:	d0 e0       	ldi	r29, 0x00	; 0
 180:	10 c0       	rjmp	.+32     	; 0x1a2 <car_yellow_op+0x34>
		{
			yellow_car_flag=1;
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <yellow_car_flag>
			DIO_TOGGLE(PA,1);
 188:	61 e0       	ldi	r22, 0x01	; 1
 18a:	81 e4       	ldi	r24, 0x41	; 65
 18c:	0e 94 94 02 	call	0x528	; 0x528 <DIO_TOGGLE>
			TIMER0_Delay_ms(1000000);
 190:	60 e4       	ldi	r22, 0x40	; 64
 192:	72 e4       	ldi	r23, 0x42	; 66
 194:	8f e0       	ldi	r24, 0x0F	; 15
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 a5 03 	call	0x74a	; 0x74a <TIMER0_Delay_ms>
			yellow_car_flag=0;
 19c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <yellow_car_flag>
	}
	
	void car_yellow_op(void)
	{
		DIO_WRITE(PA,2,LOW);
		for(int yellow_led=0;yellow_led<10;yellow_led++)
 1a0:	21 96       	adiw	r28, 0x01	; 1
 1a2:	ca 30       	cpi	r28, 0x0A	; 10
 1a4:	d1 05       	cpc	r29, r1
 1a6:	6c f3       	brlt	.-38     	; 0x182 <car_yellow_op+0x14>
			DIO_TOGGLE(PA,1);
			TIMER0_Delay_ms(1000000);
			yellow_car_flag=0;
		}
		
	}
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	08 95       	ret

000001ae <car_red_op>:
	
	void car_red_op(void)
	{
		DIO_WRITE(PA,2,HIGH);
 1ae:	41 e0       	ldi	r20, 0x01	; 1
 1b0:	62 e0       	ldi	r22, 0x02	; 2
 1b2:	81 e4       	ldi	r24, 0x41	; 65
 1b4:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_WRITE>
		red_car_flag=1;
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		
		TIMER0_Delay_ms(5000000);
 1be:	60 e4       	ldi	r22, 0x40	; 64
 1c0:	7b e4       	ldi	r23, 0x4B	; 75
 1c2:	8c e4       	ldi	r24, 0x4C	; 76
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 a5 03 	call	0x74a	; 0x74a <TIMER0_Delay_ms>
		red_car_flag=0;
 1ca:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		DIO_WRITE(PA,2,LOW);
 1ce:	40 e0       	ldi	r20, 0x00	; 0
 1d0:	62 e0       	ldi	r22, 0x02	; 2
 1d2:	81 e4       	ldi	r24, 0x41	; 65
 1d4:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_WRITE>
 1d8:	08 95       	ret

000001da <normal_mode>:
}

	void normal_mode(void)
	{		
	
		car_green_op();
 1da:	0e 94 a1 00 	call	0x142	; 0x142 <car_green_op>
		car_yellow_op();
 1de:	0e 94 b7 00 	call	0x16e	; 0x16e <car_yellow_op>
		car_red_op();
 1e2:	0e 94 d7 00 	call	0x1ae	; 0x1ae <car_red_op>
		car_yellow_op();
 1e6:	0e 94 b7 00 	call	0x16e	; 0x16e <car_yellow_op>
 1ea:	08 95       	ret

000001ec <Red_pedstrian_mode>:
		DIO_WRITE(PA,2,LOW);
	}

void Red_pedstrian_mode(void)
{
	TIMER0_endDelay();
 1ec:	0e 94 76 04 	call	0x8ec	; 0x8ec <TIMER0_endDelay>
	DIO_WRITE(PB,0,HIGH);
 1f0:	41 e0       	ldi	r20, 0x01	; 1
 1f2:	60 e0       	ldi	r22, 0x00	; 0
 1f4:	82 e4       	ldi	r24, 0x42	; 66
 1f6:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_WRITE>
	TIMER0_Delay_ms(5000000);
 1fa:	60 e4       	ldi	r22, 0x40	; 64
 1fc:	7b e4       	ldi	r23, 0x4B	; 75
 1fe:	8c e4       	ldi	r24, 0x4C	; 76
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 a5 03 	call	0x74a	; 0x74a <TIMER0_Delay_ms>
	DIO_WRITE(PB,0,LOW);
 206:	40 e0       	ldi	r20, 0x00	; 0
 208:	60 e0       	ldi	r22, 0x00	; 0
 20a:	82 e4       	ldi	r24, 0x42	; 66
 20c:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_WRITE>
	TIMER0_endDelay();
 210:	0e 94 76 04 	call	0x8ec	; 0x8ec <TIMER0_endDelay>
	DIO_WRITE(PA,2,LOW);	
 214:	40 e0       	ldi	r20, 0x00	; 0
 216:	62 e0       	ldi	r22, 0x02	; 2
 218:	81 e4       	ldi	r24, 0x41	; 65
 21a:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_WRITE>
 21e:	08 95       	ret

00000220 <blinking_both_yellow_leds>:
}


void blinking_both_yellow_leds(void)
{
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
	for (int i=0;i<10;i++) //blinking both yellow leds for 5 sec
 224:	c0 e0       	ldi	r28, 0x00	; 0
 226:	d0 e0       	ldi	r29, 0x00	; 0
 228:	0f c0       	rjmp	.+30     	; 0x248 <blinking_both_yellow_leds+0x28>
	{
		DIO_TOGGLE(PA,1);
 22a:	61 e0       	ldi	r22, 0x01	; 1
 22c:	81 e4       	ldi	r24, 0x41	; 65
 22e:	0e 94 94 02 	call	0x528	; 0x528 <DIO_TOGGLE>
		DIO_TOGGLE(PB,1);
 232:	61 e0       	ldi	r22, 0x01	; 1
 234:	82 e4       	ldi	r24, 0x42	; 66
 236:	0e 94 94 02 	call	0x528	; 0x528 <DIO_TOGGLE>
		TIMER0_Delay_ms(1000000);
 23a:	60 e4       	ldi	r22, 0x40	; 64
 23c:	72 e4       	ldi	r23, 0x42	; 66
 23e:	8f e0       	ldi	r24, 0x0F	; 15
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	0e 94 a5 03 	call	0x74a	; 0x74a <TIMER0_Delay_ms>
}


void blinking_both_yellow_leds(void)
{
	for (int i=0;i<10;i++) //blinking both yellow leds for 5 sec
 246:	21 96       	adiw	r28, 0x01	; 1
 248:	ca 30       	cpi	r28, 0x0A	; 10
 24a:	d1 05       	cpc	r29, r1
 24c:	74 f3       	brlt	.-36     	; 0x22a <blinking_both_yellow_leds+0xa>
	{
		DIO_TOGGLE(PA,1);
		DIO_TOGGLE(PB,1);
		TIMER0_Delay_ms(1000000);
	}
}
 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	08 95       	ret

00000254 <__vector_1>:
#include "Application.h"
volatile uint8_t state=0;
volatile uint8_t green_car_flag=0,yellow_car_flag=0,red_car_flag=0;

ISR(EXT_INT_0)
{
 254:	1f 92       	push	r1
 256:	0f 92       	push	r0
 258:	0f b6       	in	r0, 0x3f	; 63
 25a:	0f 92       	push	r0
 25c:	11 24       	eor	r1, r1
 25e:	2f 93       	push	r18
 260:	3f 93       	push	r19
 262:	4f 93       	push	r20
 264:	5f 93       	push	r21
 266:	6f 93       	push	r22
 268:	7f 93       	push	r23
 26a:	8f 93       	push	r24
 26c:	9f 93       	push	r25
 26e:	af 93       	push	r26
 270:	bf 93       	push	r27
 272:	ef 93       	push	r30
 274:	ff 93       	push	r31
	state=1;
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <state>
	
	if (((green_car_flag==1)||(yellow_car_flag==1))&&(state==1))
 27c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <green_car_flag>
 280:	81 30       	cpi	r24, 0x01	; 1
 282:	21 f0       	breq	.+8      	; 0x28c <__vector_1+0x38>
 284:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <yellow_car_flag>
 288:	81 30       	cpi	r24, 0x01	; 1
 28a:	99 f5       	brne	.+102    	; 0x2f2 <__vector_1+0x9e>
 28c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <state>
 290:	81 30       	cpi	r24, 0x01	; 1
 292:	79 f5       	brne	.+94     	; 0x2f2 <__vector_1+0x9e>
	{
		TIMER0_endDelay();
 294:	0e 94 76 04 	call	0x8ec	; 0x8ec <TIMER0_endDelay>
		clear_all_car_leds();
 298:	0e 94 91 00 	call	0x122	; 0x122 <clear_all_car_leds>
		blinking_both_yellow_leds();
 29c:	0e 94 10 01 	call	0x220	; 0x220 <blinking_both_yellow_leds>
		DIO_WRITE(PA,2,HIGH);
 2a0:	41 e0       	ldi	r20, 0x01	; 1
 2a2:	62 e0       	ldi	r22, 0x02	; 2
 2a4:	81 e4       	ldi	r24, 0x41	; 65
 2a6:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_WRITE>
		DIO_WRITE(PB,0,HIGH);
 2aa:	41 e0       	ldi	r20, 0x01	; 1
 2ac:	60 e0       	ldi	r22, 0x00	; 0
 2ae:	82 e4       	ldi	r24, 0x42	; 66
 2b0:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_WRITE>
		TIMER0_Delay_ms(5000000);
 2b4:	60 e4       	ldi	r22, 0x40	; 64
 2b6:	7b e4       	ldi	r23, 0x4B	; 75
 2b8:	8c e4       	ldi	r24, 0x4C	; 76
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	0e 94 a5 03 	call	0x74a	; 0x74a <TIMER0_Delay_ms>
		DIO_WRITE(PA,2,LOW);
 2c0:	40 e0       	ldi	r20, 0x00	; 0
 2c2:	62 e0       	ldi	r22, 0x02	; 2
 2c4:	81 e4       	ldi	r24, 0x41	; 65
 2c6:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_WRITE>
		blinking_both_yellow_leds();
 2ca:	0e 94 10 01 	call	0x220	; 0x220 <blinking_both_yellow_leds>
		DIO_WRITE(PB,0,LOW);
 2ce:	40 e0       	ldi	r20, 0x00	; 0
 2d0:	60 e0       	ldi	r22, 0x00	; 0
 2d2:	82 e4       	ldi	r24, 0x42	; 66
 2d4:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_WRITE>
		DIO_WRITE(PA,0,HIGH);
 2d8:	41 e0       	ldi	r20, 0x01	; 1
 2da:	60 e0       	ldi	r22, 0x00	; 0
 2dc:	81 e4       	ldi	r24, 0x41	; 65
 2de:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_WRITE>
		DIO_WRITE(PB,2,HIGH);
 2e2:	41 e0       	ldi	r20, 0x01	; 1
 2e4:	62 e0       	ldi	r22, 0x02	; 2
 2e6:	82 e4       	ldi	r24, 0x42	; 66
 2e8:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_WRITE>
		
		state=0;
 2ec:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <state>
 2f0:	0c c0       	rjmp	.+24     	; 0x30a <__vector_1+0xb6>
	}
	
	else if ((red_car_flag==1)&&(state==1))
 2f2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2f6:	81 30       	cpi	r24, 0x01	; 1
 2f8:	41 f4       	brne	.+16     	; 0x30a <__vector_1+0xb6>
 2fa:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <state>
 2fe:	81 30       	cpi	r24, 0x01	; 1
 300:	21 f4       	brne	.+8      	; 0x30a <__vector_1+0xb6>
	{
		
		Red_pedstrian_mode();
 302:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Red_pedstrian_mode>
		state=0;
 306:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <state>
	}
	
	
}
 30a:	ff 91       	pop	r31
 30c:	ef 91       	pop	r30
 30e:	bf 91       	pop	r27
 310:	af 91       	pop	r26
 312:	9f 91       	pop	r25
 314:	8f 91       	pop	r24
 316:	7f 91       	pop	r23
 318:	6f 91       	pop	r22
 31a:	5f 91       	pop	r21
 31c:	4f 91       	pop	r20
 31e:	3f 91       	pop	r19
 320:	2f 91       	pop	r18
 322:	0f 90       	pop	r0
 324:	0f be       	out	0x3f, r0	; 63
 326:	0f 90       	pop	r0
 328:	1f 90       	pop	r1
 32a:	18 95       	reti

0000032c <APP_start>:
void APP_start(void)
{
	while (1)
	{	
		
		normal_mode();
 32c:	0e 94 ed 00 	call	0x1da	; 0x1da <normal_mode>
 330:	fd cf       	rjmp	.-6      	; 0x32c <APP_start>

00000332 <main>:


int main(void)
{	
	
	APP_init();
 332:	0e 94 3e 00 	call	0x7c	; 0x7c <APP_init>
	APP_start();
 336:	0e 94 96 01 	call	0x32c	; 0x32c <APP_start>
   
}
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	08 95       	ret

00000340 <DIO_INIT>:

#include "DIO.h"
void DIO_INIT(uint8_t port,uint8_t pin_number,uint8_t direction)
{
	
	switch(port)
 340:	82 34       	cpi	r24, 0x42	; 66
 342:	31 f1       	breq	.+76     	; 0x390 <DIO_INIT+0x50>
 344:	18 f4       	brcc	.+6      	; 0x34c <DIO_INIT+0xc>
 346:	81 34       	cpi	r24, 0x41	; 65
 348:	39 f0       	breq	.+14     	; 0x358 <DIO_INIT+0x18>
 34a:	08 95       	ret
 34c:	83 34       	cpi	r24, 0x43	; 67
 34e:	e1 f1       	breq	.+120    	; 0x3c8 <DIO_INIT+0x88>
 350:	84 34       	cpi	r24, 0x44	; 68
 352:	09 f4       	brne	.+2      	; 0x356 <DIO_INIT+0x16>
 354:	54 c0       	rjmp	.+168    	; 0x3fe <DIO_INIT+0xbe>
 356:	08 95       	ret
	{
		case PA:
			if (direction==INPUT)
 358:	41 11       	cpse	r20, r1
 35a:	0c c0       	rjmp	.+24     	; 0x374 <DIO_INIT+0x34>
			{
				CLEAR_BIT(DDR_A,pin_number);
 35c:	2a b3       	in	r18, 0x1a	; 26
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	02 c0       	rjmp	.+4      	; 0x368 <DIO_INIT+0x28>
 364:	88 0f       	add	r24, r24
 366:	99 1f       	adc	r25, r25
 368:	6a 95       	dec	r22
 36a:	e2 f7       	brpl	.-8      	; 0x364 <DIO_INIT+0x24>
 36c:	80 95       	com	r24
 36e:	82 23       	and	r24, r18
 370:	8a bb       	out	0x1a, r24	; 26
 372:	08 95       	ret
			}
			else if (direction==OUTPUT)
 374:	41 30       	cpi	r20, 0x01	; 1
 376:	09 f0       	breq	.+2      	; 0x37a <DIO_INIT+0x3a>
 378:	5c c0       	rjmp	.+184    	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
			{
				SET_BIT(DDR_A,pin_number);
 37a:	2a b3       	in	r18, 0x1a	; 26
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	02 c0       	rjmp	.+4      	; 0x386 <DIO_INIT+0x46>
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	6a 95       	dec	r22
 388:	e2 f7       	brpl	.-8      	; 0x382 <DIO_INIT+0x42>
 38a:	82 2b       	or	r24, r18
 38c:	8a bb       	out	0x1a, r24	; 26
 38e:	08 95       	ret
			}
			break;
		
		case PB:
			if (direction==INPUT)
 390:	41 11       	cpse	r20, r1
 392:	0c c0       	rjmp	.+24     	; 0x3ac <DIO_INIT+0x6c>
			{
				CLEAR_BIT(DDR_B,pin_number);
 394:	27 b3       	in	r18, 0x17	; 23
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <DIO_INIT+0x60>
 39c:	88 0f       	add	r24, r24
 39e:	99 1f       	adc	r25, r25
 3a0:	6a 95       	dec	r22
 3a2:	e2 f7       	brpl	.-8      	; 0x39c <DIO_INIT+0x5c>
 3a4:	80 95       	com	r24
 3a6:	82 23       	and	r24, r18
 3a8:	87 bb       	out	0x17, r24	; 23
 3aa:	08 95       	ret
			}
			else if (direction==OUTPUT)
 3ac:	41 30       	cpi	r20, 0x01	; 1
 3ae:	09 f0       	breq	.+2      	; 0x3b2 <DIO_INIT+0x72>
 3b0:	40 c0       	rjmp	.+128    	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
			{
				SET_BIT(DDR_B,pin_number);
 3b2:	27 b3       	in	r18, 0x17	; 23
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <DIO_INIT+0x7e>
 3ba:	88 0f       	add	r24, r24
 3bc:	99 1f       	adc	r25, r25
 3be:	6a 95       	dec	r22
 3c0:	e2 f7       	brpl	.-8      	; 0x3ba <DIO_INIT+0x7a>
 3c2:	82 2b       	or	r24, r18
 3c4:	87 bb       	out	0x17, r24	; 23
 3c6:	08 95       	ret
			}
			break;
		
		case PC:
			if (direction==INPUT)
 3c8:	41 11       	cpse	r20, r1
 3ca:	0c c0       	rjmp	.+24     	; 0x3e4 <DIO_INIT+0xa4>
			{
				CLEAR_BIT(DDR_C,pin_number);
 3cc:	24 b3       	in	r18, 0x14	; 20
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <DIO_INIT+0x98>
 3d4:	88 0f       	add	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	6a 95       	dec	r22
 3da:	e2 f7       	brpl	.-8      	; 0x3d4 <DIO_INIT+0x94>
 3dc:	80 95       	com	r24
 3de:	82 23       	and	r24, r18
 3e0:	84 bb       	out	0x14, r24	; 20
 3e2:	08 95       	ret
			}
			else if (direction==OUTPUT)
 3e4:	41 30       	cpi	r20, 0x01	; 1
 3e6:	29 f5       	brne	.+74     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
			{
				SET_BIT(DDR_C,pin_number);
 3e8:	24 b3       	in	r18, 0x14	; 20
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <DIO_INIT+0xb4>
 3f0:	88 0f       	add	r24, r24
 3f2:	99 1f       	adc	r25, r25
 3f4:	6a 95       	dec	r22
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <DIO_INIT+0xb0>
 3f8:	82 2b       	or	r24, r18
 3fa:	84 bb       	out	0x14, r24	; 20
 3fc:	08 95       	ret
			}
			break;
		
		case PD:
			if (direction==INPUT)
 3fe:	41 11       	cpse	r20, r1
 400:	0c c0       	rjmp	.+24     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
			{
				CLEAR_BIT(DDR_D,pin_number);
 402:	21 b3       	in	r18, 0x11	; 17
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	02 c0       	rjmp	.+4      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 40a:	88 0f       	add	r24, r24
 40c:	99 1f       	adc	r25, r25
 40e:	6a 95       	dec	r22
 410:	e2 f7       	brpl	.-8      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 412:	80 95       	com	r24
 414:	82 23       	and	r24, r18
 416:	81 bb       	out	0x11, r24	; 17
 418:	08 95       	ret
			}
			else if (direction==OUTPUT)
 41a:	41 30       	cpi	r20, 0x01	; 1
 41c:	51 f4       	brne	.+20     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
			{
				SET_BIT(DDR_D,pin_number);
 41e:	21 b3       	in	r18, 0x11	; 17
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	02 c0       	rjmp	.+4      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 426:	88 0f       	add	r24, r24
 428:	99 1f       	adc	r25, r25
 42a:	6a 95       	dec	r22
 42c:	e2 f7       	brpl	.-8      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 42e:	82 2b       	or	r24, r18
 430:	81 bb       	out	0x11, r24	; 17
 432:	08 95       	ret

00000434 <DIO_WRITE>:
	}
}

void DIO_WRITE(uint8_t port,uint8_t pin_number,uint8_t value)
{
	switch(port)
 434:	82 34       	cpi	r24, 0x42	; 66
 436:	31 f1       	breq	.+76     	; 0x484 <DIO_WRITE+0x50>
 438:	18 f4       	brcc	.+6      	; 0x440 <DIO_WRITE+0xc>
 43a:	81 34       	cpi	r24, 0x41	; 65
 43c:	39 f0       	breq	.+14     	; 0x44c <DIO_WRITE+0x18>
 43e:	08 95       	ret
 440:	83 34       	cpi	r24, 0x43	; 67
 442:	e1 f1       	breq	.+120    	; 0x4bc <DIO_WRITE+0x88>
 444:	84 34       	cpi	r24, 0x44	; 68
 446:	09 f4       	brne	.+2      	; 0x44a <DIO_WRITE+0x16>
 448:	54 c0       	rjmp	.+168    	; 0x4f2 <DIO_WRITE+0xbe>
 44a:	08 95       	ret
	{
		case PA:
			if (value==LOW)
 44c:	41 11       	cpse	r20, r1
 44e:	0c c0       	rjmp	.+24     	; 0x468 <DIO_WRITE+0x34>
			{
				CLEAR_BIT(PORT_A,pin_number);
 450:	2b b3       	in	r18, 0x1b	; 27
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	02 c0       	rjmp	.+4      	; 0x45c <DIO_WRITE+0x28>
 458:	88 0f       	add	r24, r24
 45a:	99 1f       	adc	r25, r25
 45c:	6a 95       	dec	r22
 45e:	e2 f7       	brpl	.-8      	; 0x458 <DIO_WRITE+0x24>
 460:	80 95       	com	r24
 462:	82 23       	and	r24, r18
 464:	8b bb       	out	0x1b, r24	; 27
 466:	08 95       	ret
			}
			else if (value==HIGH)
 468:	41 30       	cpi	r20, 0x01	; 1
 46a:	09 f0       	breq	.+2      	; 0x46e <DIO_WRITE+0x3a>
 46c:	5c c0       	rjmp	.+184    	; 0x526 <DIO_WRITE+0xf2>
			{
				SET_BIT(PORT_A,pin_number);
 46e:	2b b3       	in	r18, 0x1b	; 27
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	02 c0       	rjmp	.+4      	; 0x47a <DIO_WRITE+0x46>
 476:	88 0f       	add	r24, r24
 478:	99 1f       	adc	r25, r25
 47a:	6a 95       	dec	r22
 47c:	e2 f7       	brpl	.-8      	; 0x476 <DIO_WRITE+0x42>
 47e:	82 2b       	or	r24, r18
 480:	8b bb       	out	0x1b, r24	; 27
 482:	08 95       	ret
			}
			break;
			
		case PB:
			if (value==LOW)
 484:	41 11       	cpse	r20, r1
 486:	0c c0       	rjmp	.+24     	; 0x4a0 <DIO_WRITE+0x6c>
			{
				CLEAR_BIT(PORT_B,pin_number);
 488:	28 b3       	in	r18, 0x18	; 24
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	02 c0       	rjmp	.+4      	; 0x494 <DIO_WRITE+0x60>
 490:	88 0f       	add	r24, r24
 492:	99 1f       	adc	r25, r25
 494:	6a 95       	dec	r22
 496:	e2 f7       	brpl	.-8      	; 0x490 <DIO_WRITE+0x5c>
 498:	80 95       	com	r24
 49a:	82 23       	and	r24, r18
 49c:	88 bb       	out	0x18, r24	; 24
 49e:	08 95       	ret
			}
			else if (value==HIGH)
 4a0:	41 30       	cpi	r20, 0x01	; 1
 4a2:	09 f0       	breq	.+2      	; 0x4a6 <DIO_WRITE+0x72>
 4a4:	40 c0       	rjmp	.+128    	; 0x526 <DIO_WRITE+0xf2>
			{
				SET_BIT(PORT_B,pin_number);
 4a6:	28 b3       	in	r18, 0x18	; 24
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <DIO_WRITE+0x7e>
 4ae:	88 0f       	add	r24, r24
 4b0:	99 1f       	adc	r25, r25
 4b2:	6a 95       	dec	r22
 4b4:	e2 f7       	brpl	.-8      	; 0x4ae <DIO_WRITE+0x7a>
 4b6:	82 2b       	or	r24, r18
 4b8:	88 bb       	out	0x18, r24	; 24
 4ba:	08 95       	ret
			}
			break;
			
		case PC:
			if (value==LOW)
 4bc:	41 11       	cpse	r20, r1
 4be:	0c c0       	rjmp	.+24     	; 0x4d8 <DIO_WRITE+0xa4>
			{
				CLEAR_BIT(PORT_C,pin_number);
 4c0:	25 b3       	in	r18, 0x15	; 21
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	02 c0       	rjmp	.+4      	; 0x4cc <DIO_WRITE+0x98>
 4c8:	88 0f       	add	r24, r24
 4ca:	99 1f       	adc	r25, r25
 4cc:	6a 95       	dec	r22
 4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <DIO_WRITE+0x94>
 4d0:	80 95       	com	r24
 4d2:	82 23       	and	r24, r18
 4d4:	85 bb       	out	0x15, r24	; 21
 4d6:	08 95       	ret
			}
			else if (value==HIGH)
 4d8:	41 30       	cpi	r20, 0x01	; 1
 4da:	29 f5       	brne	.+74     	; 0x526 <DIO_WRITE+0xf2>
			{
				SET_BIT(PORT_C,pin_number);
 4dc:	25 b3       	in	r18, 0x15	; 21
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <DIO_WRITE+0xb4>
 4e4:	88 0f       	add	r24, r24
 4e6:	99 1f       	adc	r25, r25
 4e8:	6a 95       	dec	r22
 4ea:	e2 f7       	brpl	.-8      	; 0x4e4 <DIO_WRITE+0xb0>
 4ec:	82 2b       	or	r24, r18
 4ee:	85 bb       	out	0x15, r24	; 21
 4f0:	08 95       	ret
			}
			break;
			
		case PD:
			if (value==LOW)
 4f2:	41 11       	cpse	r20, r1
 4f4:	0c c0       	rjmp	.+24     	; 0x50e <DIO_WRITE+0xda>
			{
				CLEAR_BIT(PORT_D,pin_number);
 4f6:	22 b3       	in	r18, 0x12	; 18
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	02 c0       	rjmp	.+4      	; 0x502 <DIO_WRITE+0xce>
 4fe:	88 0f       	add	r24, r24
 500:	99 1f       	adc	r25, r25
 502:	6a 95       	dec	r22
 504:	e2 f7       	brpl	.-8      	; 0x4fe <DIO_WRITE+0xca>
 506:	80 95       	com	r24
 508:	82 23       	and	r24, r18
 50a:	82 bb       	out	0x12, r24	; 18
 50c:	08 95       	ret
			}
			else if (value==HIGH)
 50e:	41 30       	cpi	r20, 0x01	; 1
 510:	51 f4       	brne	.+20     	; 0x526 <DIO_WRITE+0xf2>
			{
				SET_BIT(PORT_D,pin_number);
 512:	22 b3       	in	r18, 0x12	; 18
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	02 c0       	rjmp	.+4      	; 0x51e <DIO_WRITE+0xea>
 51a:	88 0f       	add	r24, r24
 51c:	99 1f       	adc	r25, r25
 51e:	6a 95       	dec	r22
 520:	e2 f7       	brpl	.-8      	; 0x51a <DIO_WRITE+0xe6>
 522:	82 2b       	or	r24, r18
 524:	82 bb       	out	0x12, r24	; 18
 526:	08 95       	ret

00000528 <DIO_TOGGLE>:
	}
}

void DIO_TOGGLE(uint8_t port,uint8_t pin_number){
	
	switch(port)
 528:	82 34       	cpi	r24, 0x42	; 66
 52a:	a1 f0       	breq	.+40     	; 0x554 <DIO_TOGGLE+0x2c>
 52c:	18 f4       	brcc	.+6      	; 0x534 <DIO_TOGGLE+0xc>
 52e:	81 34       	cpi	r24, 0x41	; 65
 530:	31 f0       	breq	.+12     	; 0x53e <DIO_TOGGLE+0x16>
 532:	08 95       	ret
 534:	83 34       	cpi	r24, 0x43	; 67
 536:	c9 f0       	breq	.+50     	; 0x56a <DIO_TOGGLE+0x42>
 538:	84 34       	cpi	r24, 0x44	; 68
 53a:	11 f1       	breq	.+68     	; 0x580 <DIO_TOGGLE+0x58>
 53c:	08 95       	ret
	{
		case PA:
		TOGGLE_BIT(PORT_A, pin_number);
 53e:	2b b3       	in	r18, 0x1b	; 27
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	02 c0       	rjmp	.+4      	; 0x54a <DIO_TOGGLE+0x22>
 546:	88 0f       	add	r24, r24
 548:	99 1f       	adc	r25, r25
 54a:	6a 95       	dec	r22
 54c:	e2 f7       	brpl	.-8      	; 0x546 <DIO_TOGGLE+0x1e>
 54e:	82 27       	eor	r24, r18
 550:	8b bb       	out	0x1b, r24	; 27
		break;
 552:	08 95       	ret
		case PB:
		TOGGLE_BIT(PORT_B, pin_number);
 554:	28 b3       	in	r18, 0x18	; 24
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	02 c0       	rjmp	.+4      	; 0x560 <DIO_TOGGLE+0x38>
 55c:	88 0f       	add	r24, r24
 55e:	99 1f       	adc	r25, r25
 560:	6a 95       	dec	r22
 562:	e2 f7       	brpl	.-8      	; 0x55c <DIO_TOGGLE+0x34>
 564:	82 27       	eor	r24, r18
 566:	88 bb       	out	0x18, r24	; 24
		break;
 568:	08 95       	ret
		case PC:
		TOGGLE_BIT(PORT_C, pin_number);
 56a:	25 b3       	in	r18, 0x15	; 21
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	02 c0       	rjmp	.+4      	; 0x576 <DIO_TOGGLE+0x4e>
 572:	88 0f       	add	r24, r24
 574:	99 1f       	adc	r25, r25
 576:	6a 95       	dec	r22
 578:	e2 f7       	brpl	.-8      	; 0x572 <DIO_TOGGLE+0x4a>
 57a:	82 27       	eor	r24, r18
 57c:	85 bb       	out	0x15, r24	; 21
		break;
 57e:	08 95       	ret
		case PD:
		TOGGLE_BIT(PORT_D, pin_number);
 580:	22 b3       	in	r18, 0x12	; 18
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	02 c0       	rjmp	.+4      	; 0x58c <DIO_TOGGLE+0x64>
 588:	88 0f       	add	r24, r24
 58a:	99 1f       	adc	r25, r25
 58c:	6a 95       	dec	r22
 58e:	e2 f7       	brpl	.-8      	; 0x588 <DIO_TOGGLE+0x60>
 590:	82 27       	eor	r24, r18
 592:	82 bb       	out	0x12, r24	; 18
 594:	08 95       	ret

00000596 <ENABLE_EXTERNAL_INTERRUPT>:
		break;
	case INTERRUPT1 :
	CLEAR_BIT(GICR,INT_1);
		break;
	case INTERRUPT2 :
	CLEAR_BIT(GICR,INT_2);
 596:	81 30       	cpi	r24, 0x01	; 1
 598:	61 f1       	breq	.+88     	; 0x5f2 <ENABLE_EXTERNAL_INTERRUPT+0x5c>
 59a:	20 f0       	brcs	.+8      	; 0x5a4 <ENABLE_EXTERNAL_INTERRUPT+0xe>
 59c:	82 30       	cpi	r24, 0x02	; 2
 59e:	09 f4       	brne	.+2      	; 0x5a2 <ENABLE_EXTERNAL_INTERRUPT+0xc>
 5a0:	4f c0       	rjmp	.+158    	; 0x640 <ENABLE_EXTERNAL_INTERRUPT+0xaa>
 5a2:	08 95       	ret
 5a4:	8b b7       	in	r24, 0x3b	; 59
 5a6:	80 64       	ori	r24, 0x40	; 64
 5a8:	8b bf       	out	0x3b, r24	; 59
 5aa:	61 11       	cpse	r22, r1
 5ac:	07 c0       	rjmp	.+14     	; 0x5bc <ENABLE_EXTERNAL_INTERRUPT+0x26>
 5ae:	85 b7       	in	r24, 0x35	; 53
 5b0:	81 60       	ori	r24, 0x01	; 1
 5b2:	85 bf       	out	0x35, r24	; 53
 5b4:	85 b7       	in	r24, 0x35	; 53
 5b6:	82 60       	ori	r24, 0x02	; 2
 5b8:	85 bf       	out	0x35, r24	; 53
 5ba:	08 95       	ret
 5bc:	61 30       	cpi	r22, 0x01	; 1
 5be:	39 f4       	brne	.+14     	; 0x5ce <ENABLE_EXTERNAL_INTERRUPT+0x38>
 5c0:	85 b7       	in	r24, 0x35	; 53
 5c2:	8e 7f       	andi	r24, 0xFE	; 254
 5c4:	85 bf       	out	0x35, r24	; 53
 5c6:	85 b7       	in	r24, 0x35	; 53
 5c8:	82 60       	ori	r24, 0x02	; 2
 5ca:	85 bf       	out	0x35, r24	; 53
 5cc:	08 95       	ret
 5ce:	62 30       	cpi	r22, 0x02	; 2
 5d0:	39 f4       	brne	.+14     	; 0x5e0 <ENABLE_EXTERNAL_INTERRUPT+0x4a>
 5d2:	85 b7       	in	r24, 0x35	; 53
 5d4:	81 60       	ori	r24, 0x01	; 1
 5d6:	85 bf       	out	0x35, r24	; 53
 5d8:	85 b7       	in	r24, 0x35	; 53
 5da:	8d 7f       	andi	r24, 0xFD	; 253
 5dc:	85 bf       	out	0x35, r24	; 53
 5de:	08 95       	ret
 5e0:	63 30       	cpi	r22, 0x03	; 3
 5e2:	e1 f5       	brne	.+120    	; 0x65c <ENABLE_EXTERNAL_INTERRUPT+0xc6>
 5e4:	85 b7       	in	r24, 0x35	; 53
 5e6:	8e 7f       	andi	r24, 0xFE	; 254
 5e8:	85 bf       	out	0x35, r24	; 53
 5ea:	85 b7       	in	r24, 0x35	; 53
 5ec:	8d 7f       	andi	r24, 0xFD	; 253
 5ee:	85 bf       	out	0x35, r24	; 53
 5f0:	08 95       	ret
 5f2:	8b b7       	in	r24, 0x3b	; 59
 5f4:	80 68       	ori	r24, 0x80	; 128
 5f6:	8b bf       	out	0x3b, r24	; 59
 5f8:	61 11       	cpse	r22, r1
 5fa:	07 c0       	rjmp	.+14     	; 0x60a <ENABLE_EXTERNAL_INTERRUPT+0x74>
 5fc:	85 b7       	in	r24, 0x35	; 53
 5fe:	84 60       	ori	r24, 0x04	; 4
 600:	85 bf       	out	0x35, r24	; 53
 602:	85 b7       	in	r24, 0x35	; 53
 604:	88 60       	ori	r24, 0x08	; 8
 606:	85 bf       	out	0x35, r24	; 53
 608:	08 95       	ret
 60a:	61 30       	cpi	r22, 0x01	; 1
 60c:	39 f4       	brne	.+14     	; 0x61c <ENABLE_EXTERNAL_INTERRUPT+0x86>
 60e:	85 b7       	in	r24, 0x35	; 53
 610:	8b 7f       	andi	r24, 0xFB	; 251
 612:	85 bf       	out	0x35, r24	; 53
 614:	85 b7       	in	r24, 0x35	; 53
 616:	88 60       	ori	r24, 0x08	; 8
 618:	85 bf       	out	0x35, r24	; 53
 61a:	08 95       	ret
 61c:	62 30       	cpi	r22, 0x02	; 2
 61e:	39 f4       	brne	.+14     	; 0x62e <ENABLE_EXTERNAL_INTERRUPT+0x98>
 620:	85 b7       	in	r24, 0x35	; 53
 622:	84 60       	ori	r24, 0x04	; 4
 624:	85 bf       	out	0x35, r24	; 53
 626:	85 b7       	in	r24, 0x35	; 53
 628:	87 7f       	andi	r24, 0xF7	; 247
 62a:	85 bf       	out	0x35, r24	; 53
 62c:	08 95       	ret
 62e:	63 30       	cpi	r22, 0x03	; 3
 630:	a9 f4       	brne	.+42     	; 0x65c <ENABLE_EXTERNAL_INTERRUPT+0xc6>
 632:	85 b7       	in	r24, 0x35	; 53
 634:	8b 7f       	andi	r24, 0xFB	; 251
 636:	85 bf       	out	0x35, r24	; 53
 638:	85 b7       	in	r24, 0x35	; 53
 63a:	87 7f       	andi	r24, 0xF7	; 247
 63c:	85 bf       	out	0x35, r24	; 53
 63e:	08 95       	ret
 640:	8b b7       	in	r24, 0x3b	; 59
 642:	80 62       	ori	r24, 0x20	; 32
 644:	8b bf       	out	0x3b, r24	; 59
 646:	61 11       	cpse	r22, r1
 648:	04 c0       	rjmp	.+8      	; 0x652 <ENABLE_EXTERNAL_INTERRUPT+0xbc>
 64a:	84 b7       	in	r24, 0x34	; 52
 64c:	80 64       	ori	r24, 0x40	; 64
 64e:	84 bf       	out	0x34, r24	; 52
 650:	08 95       	ret
 652:	61 30       	cpi	r22, 0x01	; 1
 654:	19 f4       	brne	.+6      	; 0x65c <ENABLE_EXTERNAL_INTERRUPT+0xc6>
 656:	84 b7       	in	r24, 0x34	; 52
 658:	8f 7b       	andi	r24, 0xBF	; 191
 65a:	84 bf       	out	0x34, r24	; 52
 65c:	08 95       	ret

0000065e <Enable_global_INT>:
}

//......................................................................//
void Enable_global_INT(void)
{
	SET_BIT(SREG,7);	
 65e:	8f b7       	in	r24, 0x3f	; 63
 660:	80 68       	ori	r24, 0x80	; 128
 662:	8f bf       	out	0x3f, r24	; 63
 664:	08 95       	ret

00000666 <TIMER0_init>:

uint32_t prescaler ;/*variable carry prescaler taken in INIT function*/
uint8_t break_delay = 0; /*variable use to check if there while delay loop want to be ended   zero : no end delay  , one : there are end delay*/

void TIMER0_init(const Timer0_ConfigType * config_Ptr)
{
 666:	fc 01       	movw	r30, r24
	if((config_Ptr->mode) != FAST_PWM_MODE)
 668:	80 81       	ld	r24, Z
 66a:	83 30       	cpi	r24, 0x03	; 3
 66c:	19 f0       	breq	.+6      	; 0x674 <TIMER0_init+0xe>
		SET_BIT(TCCR0,7);  /// active only for non-PWM 
 66e:	83 b7       	in	r24, 0x33	; 51
 670:	80 68       	ori	r24, 0x80	; 128
 672:	83 bf       	out	0x33, r24	; 51
	
	TCCR0  |= (((config_Ptr->mode) & 0x01) << 6) | (((config_Ptr->mode) & 0x02) << 3);/*set WGM00 WGM01  */
 674:	83 b7       	in	r24, 0x33	; 51
 676:	90 81       	ld	r25, Z
 678:	29 2f       	mov	r18, r25
 67a:	21 70       	andi	r18, 0x01	; 1
 67c:	30 e0       	ldi	r19, 0x00	; 0
 67e:	a9 01       	movw	r20, r18
 680:	00 24       	eor	r0, r0
 682:	56 95       	lsr	r21
 684:	47 95       	ror	r20
 686:	07 94       	ror	r0
 688:	56 95       	lsr	r21
 68a:	47 95       	ror	r20
 68c:	07 94       	ror	r0
 68e:	54 2f       	mov	r21, r20
 690:	40 2d       	mov	r20, r0
 692:	92 70       	andi	r25, 0x02	; 2
 694:	29 2f       	mov	r18, r25
 696:	30 e0       	ldi	r19, 0x00	; 0
 698:	22 0f       	add	r18, r18
 69a:	33 1f       	adc	r19, r19
 69c:	22 0f       	add	r18, r18
 69e:	33 1f       	adc	r19, r19
 6a0:	22 0f       	add	r18, r18
 6a2:	33 1f       	adc	r19, r19
 6a4:	24 2b       	or	r18, r20
 6a6:	28 2b       	or	r18, r24
 6a8:	23 bf       	out	0x33, r18	; 51
	TCCR0 |= config_Ptr->clock; /*  choose clock         */
 6aa:	93 b7       	in	r25, 0x33	; 51
 6ac:	81 81       	ldd	r24, Z+1	; 0x01
 6ae:	89 2b       	or	r24, r25
 6b0:	83 bf       	out	0x33, r24	; 51
	if(config_Ptr->clock == F_CPU_1)
 6b2:	81 81       	ldd	r24, Z+1	; 0x01
 6b4:	81 30       	cpi	r24, 0x01	; 1
 6b6:	69 f4       	brne	.+26     	; 0x6d2 <TIMER0_init+0x6c>
		prescaler = 1;
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	a0 e0       	ldi	r26, 0x00	; 0
 6be:	b0 e0       	ldi	r27, 0x00	; 0
 6c0:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <prescaler>
 6c4:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <prescaler+0x1>
 6c8:	a0 93 67 00 	sts	0x0067, r26	; 0x800067 <prescaler+0x2>
 6cc:	b0 93 68 00 	sts	0x0068, r27	; 0x800068 <prescaler+0x3>
 6d0:	08 95       	ret
	else if (config_Ptr->clock == F_CPU_8)
 6d2:	82 30       	cpi	r24, 0x02	; 2
 6d4:	69 f4       	brne	.+26     	; 0x6f0 <TIMER0_init+0x8a>
		prescaler = 8;
 6d6:	88 e0       	ldi	r24, 0x08	; 8
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	a0 e0       	ldi	r26, 0x00	; 0
 6dc:	b0 e0       	ldi	r27, 0x00	; 0
 6de:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <prescaler>
 6e2:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <prescaler+0x1>
 6e6:	a0 93 67 00 	sts	0x0067, r26	; 0x800067 <prescaler+0x2>
 6ea:	b0 93 68 00 	sts	0x0068, r27	; 0x800068 <prescaler+0x3>
 6ee:	08 95       	ret
	else if (config_Ptr->clock == F_CPU_64)
 6f0:	83 30       	cpi	r24, 0x03	; 3
 6f2:	69 f4       	brne	.+26     	; 0x70e <TIMER0_init+0xa8>
		prescaler = 64;
 6f4:	80 e4       	ldi	r24, 0x40	; 64
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	a0 e0       	ldi	r26, 0x00	; 0
 6fa:	b0 e0       	ldi	r27, 0x00	; 0
 6fc:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <prescaler>
 700:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <prescaler+0x1>
 704:	a0 93 67 00 	sts	0x0067, r26	; 0x800067 <prescaler+0x2>
 708:	b0 93 68 00 	sts	0x0068, r27	; 0x800068 <prescaler+0x3>
 70c:	08 95       	ret
	else if (config_Ptr->clock == F_CPU_256)
 70e:	84 30       	cpi	r24, 0x04	; 4
 710:	69 f4       	brne	.+26     	; 0x72c <TIMER0_init+0xc6>
		prescaler = 256;
 712:	80 e0       	ldi	r24, 0x00	; 0
 714:	91 e0       	ldi	r25, 0x01	; 1
 716:	a0 e0       	ldi	r26, 0x00	; 0
 718:	b0 e0       	ldi	r27, 0x00	; 0
 71a:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <prescaler>
 71e:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <prescaler+0x1>
 722:	a0 93 67 00 	sts	0x0067, r26	; 0x800067 <prescaler+0x2>
 726:	b0 93 68 00 	sts	0x0068, r27	; 0x800068 <prescaler+0x3>
 72a:	08 95       	ret
	else if (config_Ptr->clock == F_CPU_1024)
 72c:	85 30       	cpi	r24, 0x05	; 5
 72e:	61 f4       	brne	.+24     	; 0x748 <TIMER0_init+0xe2>
		prescaler = 1024;
 730:	80 e0       	ldi	r24, 0x00	; 0
 732:	94 e0       	ldi	r25, 0x04	; 4
 734:	a0 e0       	ldi	r26, 0x00	; 0
 736:	b0 e0       	ldi	r27, 0x00	; 0
 738:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <prescaler>
 73c:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <prescaler+0x1>
 740:	a0 93 67 00 	sts	0x0067, r26	; 0x800067 <prescaler+0x2>
 744:	b0 93 68 00 	sts	0x0068, r27	; 0x800068 <prescaler+0x3>
 748:	08 95       	ret

0000074a <TIMER0_Delay_ms>:
}
*/

 /////Note for some round in calculation minimum delay can ably is 3 msec and function take 2000  and more increase delay accuracy increase
void TIMER0_Delay_ms(uint32_t T_delay)
{
 74a:	2f 92       	push	r2
 74c:	3f 92       	push	r3
 74e:	4f 92       	push	r4
 750:	5f 92       	push	r5
 752:	6f 92       	push	r6
 754:	7f 92       	push	r7
 756:	8f 92       	push	r8
 758:	9f 92       	push	r9
 75a:	af 92       	push	r10
 75c:	bf 92       	push	r11
 75e:	cf 92       	push	r12
 760:	df 92       	push	r13
 762:	ef 92       	push	r14
 764:	ff 92       	push	r15
 766:	0f 93       	push	r16
 768:	1f 93       	push	r17
 76a:	cf 93       	push	r28
 76c:	df 93       	push	r29
 76e:	cd b7       	in	r28, 0x3d	; 61
 770:	de b7       	in	r29, 0x3e	; 62
 772:	2a 97       	sbiw	r28, 0x0a	; 10
 774:	0f b6       	in	r0, 0x3f	; 63
 776:	f8 94       	cli
 778:	de bf       	out	0x3e, r29	; 62
 77a:	0f be       	out	0x3f, r0	; 63
 77c:	cd bf       	out	0x3d, r28	; 61
 77e:	6b 01       	movw	r12, r22
 780:	7c 01       	movw	r14, r24
	break_delay = 0;
 782:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <break_delay>
	uint64_t T_tick =1;
	T_tick = ((prescaler*1000000)) / (F_CPU_MCU);
 786:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <prescaler>
 78a:	30 91 66 00 	lds	r19, 0x0066	; 0x800066 <prescaler+0x1>
 78e:	40 91 67 00 	lds	r20, 0x0067	; 0x800067 <prescaler+0x2>
 792:	50 91 68 00 	lds	r21, 0x0068	; 0x800068 <prescaler+0x3>
 796:	60 e4       	ldi	r22, 0x40	; 64
 798:	72 e4       	ldi	r23, 0x42	; 66
 79a:	8f e0       	ldi	r24, 0x0F	; 15
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	0e 94 67 05 	call	0xace	; 0xace <__mulsi3>
 7a2:	20 e4       	ldi	r18, 0x40	; 64
 7a4:	32 e4       	ldi	r19, 0x42	; 66
 7a6:	4f e0       	ldi	r20, 0x0F	; 15
 7a8:	50 e0       	ldi	r21, 0x00	; 0
 7aa:	0e 94 77 05 	call	0xaee	; 0xaee <__udivmodsi4>
 7ae:	19 01       	movw	r2, r18
 7b0:	2a 01       	movw	r4, r20
	uint32_t T_maxdelay = T_tick * 256;
 7b2:	54 2f       	mov	r21, r20
 7b4:	43 2f       	mov	r20, r19
 7b6:	32 2f       	mov	r19, r18
 7b8:	22 27       	eor	r18, r18
	if(T_delay < T_maxdelay)
 7ba:	c2 16       	cp	r12, r18
 7bc:	d3 06       	cpc	r13, r19
 7be:	e4 06       	cpc	r14, r20
 7c0:	f5 06       	cpc	r15, r21
 7c2:	68 f5       	brcc	.+90     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
	{
		uint8_t T_initialvalue = ( (T_maxdelay - T_delay) / T_tick );
 7c4:	da 01       	movw	r26, r20
 7c6:	c9 01       	movw	r24, r18
 7c8:	8c 19       	sub	r24, r12
 7ca:	9d 09       	sbc	r25, r13
 7cc:	ae 09       	sbc	r26, r14
 7ce:	bf 09       	sbc	r27, r15
 7d0:	8c 01       	movw	r16, r24
 7d2:	9d 01       	movw	r18, r26
 7d4:	40 e0       	ldi	r20, 0x00	; 0
 7d6:	50 e0       	ldi	r21, 0x00	; 0
 7d8:	ba 01       	movw	r22, r20
 7da:	89 83       	std	Y+1, r24	; 0x01
 7dc:	1a 83       	std	Y+2, r17	; 0x02
 7de:	2b 83       	std	Y+3, r18	; 0x03
 7e0:	3c 83       	std	Y+4, r19	; 0x04
 7e2:	4d 83       	std	Y+5, r20	; 0x05
 7e4:	5e 83       	std	Y+6, r21	; 0x06
 7e6:	6f 83       	std	Y+7, r22	; 0x07
 7e8:	78 87       	std	Y+8, r23	; 0x08
 7ea:	a2 2c       	mov	r10, r2
 7ec:	b3 2c       	mov	r11, r3
 7ee:	c4 2c       	mov	r12, r4
 7f0:	d5 2c       	mov	r13, r5
 7f2:	e1 2c       	mov	r14, r1
 7f4:	f1 2c       	mov	r15, r1
 7f6:	00 e0       	ldi	r16, 0x00	; 0
 7f8:	10 e0       	ldi	r17, 0x00	; 0
 7fa:	29 81       	ldd	r18, Y+1	; 0x01
 7fc:	3a 81       	ldd	r19, Y+2	; 0x02
 7fe:	4b 81       	ldd	r20, Y+3	; 0x03
 800:	5c 81       	ldd	r21, Y+4	; 0x04
 802:	60 e0       	ldi	r22, 0x00	; 0
 804:	70 e0       	ldi	r23, 0x00	; 0
 806:	80 e0       	ldi	r24, 0x00	; 0
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__udivdi3>
		TCNT0 = T_initialvalue; //set TCNT0 with initial value
 80e:	22 bf       	out	0x32, r18	; 50
		while(! CHECK_BIT(TIFR,0)); //check bit TOV0 is set that mean overflow occur
 810:	08 b6       	in	r0, 0x38	; 56
 812:	00 fe       	sbrs	r0, 0
 814:	fd cf       	rjmp	.-6      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
		SET_BIT(TIFR,0); //as not using interrupt should set this bit to clear flag
 816:	88 b7       	in	r24, 0x38	; 56
 818:	81 60       	ori	r24, 0x01	; 1
 81a:	88 bf       	out	0x38, r24	; 56
 81c:	4e c0       	rjmp	.+156    	; 0x8ba <__stack+0x5b>
	}
	else if(T_delay > T_maxdelay)
 81e:	2c 15       	cp	r18, r12
 820:	3d 05       	cpc	r19, r13
 822:	4e 05       	cpc	r20, r14
 824:	5f 05       	cpc	r21, r15
 826:	08 f0       	brcs	.+2      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 828:	48 c0       	rjmp	.+144    	; 0x8ba <__stack+0x5b>
	{
		uint16_t actaul_counted_overflow = 0 ;
		uint16_t NUM_overflow =ceil (T_delay / T_maxdelay) ;
 82a:	c7 01       	movw	r24, r14
 82c:	b6 01       	movw	r22, r12
 82e:	0e 94 77 05 	call	0xaee	; 0xaee <__udivmodsi4>
 832:	ca 01       	movw	r24, r20
 834:	b9 01       	movw	r22, r18
 836:	0e 94 c0 04 	call	0x980	; 0x980 <__floatunsisf>
 83a:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <ceil>
 83e:	0e 94 91 04 	call	0x922	; 0x922 <__fixunssfsi>
 842:	7a 87       	std	Y+10, r23	; 0x0a
 844:	69 87       	std	Y+9, r22	; 0x09
		uint8_t T_initialvalue =  ( 256 - ( ( T_delay / T_tick ) / NUM_overflow )) ;
 846:	a7 01       	movw	r20, r14
 848:	96 01       	movw	r18, r12
 84a:	60 e0       	ldi	r22, 0x00	; 0
 84c:	70 e0       	ldi	r23, 0x00	; 0
 84e:	cb 01       	movw	r24, r22
 850:	c9 82       	std	Y+1, r12	; 0x01
 852:	3a 83       	std	Y+2, r19	; 0x02
 854:	4b 83       	std	Y+3, r20	; 0x03
 856:	5c 83       	std	Y+4, r21	; 0x04
 858:	6d 83       	std	Y+5, r22	; 0x05
 85a:	7e 83       	std	Y+6, r23	; 0x06
 85c:	8f 83       	std	Y+7, r24	; 0x07
 85e:	98 87       	std	Y+8, r25	; 0x08
 860:	a2 2c       	mov	r10, r2
 862:	b3 2c       	mov	r11, r3
 864:	c4 2c       	mov	r12, r4
 866:	d5 2c       	mov	r13, r5
 868:	e1 2c       	mov	r14, r1
 86a:	f1 2c       	mov	r15, r1
 86c:	00 e0       	ldi	r16, 0x00	; 0
 86e:	10 e0       	ldi	r17, 0x00	; 0
 870:	60 e0       	ldi	r22, 0x00	; 0
 872:	70 e0       	ldi	r23, 0x00	; 0
 874:	80 e0       	ldi	r24, 0x00	; 0
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__udivdi3>
 87c:	e9 85       	ldd	r30, Y+9	; 0x09
 87e:	fa 85       	ldd	r31, Y+10	; 0x0a
 880:	1f 01       	movw	r2, r30
 882:	ae 2e       	mov	r10, r30
 884:	b3 2c       	mov	r11, r3
 886:	c1 2c       	mov	r12, r1
 888:	d1 2c       	mov	r13, r1
 88a:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__udivdi3>
 88e:	21 95       	neg	r18
		TCNT0 = T_initialvalue; //set TCNT0 with initial value
 890:	22 bf       	out	0x32, r18	; 50
		while(! CHECK_BIT(TIFR,0)); //check bit TOV0 is set that mean overflow occur
		SET_BIT(TIFR,0); //as not using interrupt should set this bit to clear flag
	}
	else if(T_delay > T_maxdelay)
	{
		uint16_t actaul_counted_overflow = 0 ;
 892:	20 e0       	ldi	r18, 0x00	; 0
 894:	30 e0       	ldi	r19, 0x00	; 0
		uint16_t NUM_overflow =ceil (T_delay / T_maxdelay) ;
		uint8_t T_initialvalue =  ( 256 - ( ( T_delay / T_tick ) / NUM_overflow )) ;
		TCNT0 = T_initialvalue; //set TCNT0 with initial value
		while(actaul_counted_overflow < NUM_overflow)
 896:	0c c0       	rjmp	.+24     	; 0x8b0 <__stack+0x51>
		{
			
			while(! CHECK_BIT(TIFR,0)); //check bit TOV0 is set that mean overflow occur
 898:	08 b6       	in	r0, 0x38	; 56
 89a:	00 fe       	sbrs	r0, 0
 89c:	fd cf       	rjmp	.-6      	; 0x898 <__stack+0x39>
			SET_BIT(TIFR,0); //as not using interrupt should set this bit to clear flag
 89e:	88 b7       	in	r24, 0x38	; 56
 8a0:	81 60       	ori	r24, 0x01	; 1
 8a2:	88 bf       	out	0x38, r24	; 56
			actaul_counted_overflow++;
 8a4:	2f 5f       	subi	r18, 0xFF	; 255
 8a6:	3f 4f       	sbci	r19, 0xFF	; 255
			if (break_delay == 1)
 8a8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <break_delay>
 8ac:	81 30       	cpi	r24, 0x01	; 1
 8ae:	29 f0       	breq	.+10     	; 0x8ba <__stack+0x5b>
	{
		uint16_t actaul_counted_overflow = 0 ;
		uint16_t NUM_overflow =ceil (T_delay / T_maxdelay) ;
		uint8_t T_initialvalue =  ( 256 - ( ( T_delay / T_tick ) / NUM_overflow )) ;
		TCNT0 = T_initialvalue; //set TCNT0 with initial value
		while(actaul_counted_overflow < NUM_overflow)
 8b0:	09 85       	ldd	r16, Y+9	; 0x09
 8b2:	1a 85       	ldd	r17, Y+10	; 0x0a
 8b4:	20 17       	cp	r18, r16
 8b6:	31 07       	cpc	r19, r17
 8b8:	78 f3       	brcs	.-34     	; 0x898 <__stack+0x39>
			if (break_delay == 1)
				break;
		}
	}
	
}
 8ba:	2a 96       	adiw	r28, 0x0a	; 10
 8bc:	0f b6       	in	r0, 0x3f	; 63
 8be:	f8 94       	cli
 8c0:	de bf       	out	0x3e, r29	; 62
 8c2:	0f be       	out	0x3f, r0	; 63
 8c4:	cd bf       	out	0x3d, r28	; 61
 8c6:	df 91       	pop	r29
 8c8:	cf 91       	pop	r28
 8ca:	1f 91       	pop	r17
 8cc:	0f 91       	pop	r16
 8ce:	ff 90       	pop	r15
 8d0:	ef 90       	pop	r14
 8d2:	df 90       	pop	r13
 8d4:	cf 90       	pop	r12
 8d6:	bf 90       	pop	r11
 8d8:	af 90       	pop	r10
 8da:	9f 90       	pop	r9
 8dc:	8f 90       	pop	r8
 8de:	7f 90       	pop	r7
 8e0:	6f 90       	pop	r6
 8e2:	5f 90       	pop	r5
 8e4:	4f 90       	pop	r4
 8e6:	3f 90       	pop	r3
 8e8:	2f 90       	pop	r2
 8ea:	08 95       	ret

000008ec <TIMER0_endDelay>:

void TIMER0_endDelay(void)
{
	break_delay = 1;
 8ec:	81 e0       	ldi	r24, 0x01	; 1
 8ee:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <break_delay>
 8f2:	08 95       	ret

000008f4 <ceil>:
 8f4:	0e 94 48 05 	call	0xa90	; 0xa90 <__fp_trunc>
 8f8:	90 f0       	brcs	.+36     	; 0x91e <ceil+0x2a>
 8fa:	9f 37       	cpi	r25, 0x7F	; 127
 8fc:	48 f4       	brcc	.+18     	; 0x910 <ceil+0x1c>
 8fe:	91 11       	cpse	r25, r1
 900:	16 f4       	brtc	.+4      	; 0x906 <ceil+0x12>
 902:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__fp_szero>
 906:	60 e0       	ldi	r22, 0x00	; 0
 908:	70 e0       	ldi	r23, 0x00	; 0
 90a:	80 e8       	ldi	r24, 0x80	; 128
 90c:	9f e3       	ldi	r25, 0x3F	; 63
 90e:	08 95       	ret
 910:	26 f0       	brts	.+8      	; 0x91a <ceil+0x26>
 912:	1b 16       	cp	r1, r27
 914:	61 1d       	adc	r22, r1
 916:	71 1d       	adc	r23, r1
 918:	81 1d       	adc	r24, r1
 91a:	0c 94 fd 04 	jmp	0x9fa	; 0x9fa <__fp_mintl>
 91e:	0c 94 18 05 	jmp	0xa30	; 0xa30 <__fp_mpack>

00000922 <__fixunssfsi>:
 922:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__fp_splitA>
 926:	88 f0       	brcs	.+34     	; 0x94a <__fixunssfsi+0x28>
 928:	9f 57       	subi	r25, 0x7F	; 127
 92a:	98 f0       	brcs	.+38     	; 0x952 <__fixunssfsi+0x30>
 92c:	b9 2f       	mov	r27, r25
 92e:	99 27       	eor	r25, r25
 930:	b7 51       	subi	r27, 0x17	; 23
 932:	b0 f0       	brcs	.+44     	; 0x960 <__fixunssfsi+0x3e>
 934:	e1 f0       	breq	.+56     	; 0x96e <__fixunssfsi+0x4c>
 936:	66 0f       	add	r22, r22
 938:	77 1f       	adc	r23, r23
 93a:	88 1f       	adc	r24, r24
 93c:	99 1f       	adc	r25, r25
 93e:	1a f0       	brmi	.+6      	; 0x946 <__fixunssfsi+0x24>
 940:	ba 95       	dec	r27
 942:	c9 f7       	brne	.-14     	; 0x936 <__fixunssfsi+0x14>
 944:	14 c0       	rjmp	.+40     	; 0x96e <__fixunssfsi+0x4c>
 946:	b1 30       	cpi	r27, 0x01	; 1
 948:	91 f0       	breq	.+36     	; 0x96e <__fixunssfsi+0x4c>
 94a:	0e 94 60 05 	call	0xac0	; 0xac0 <__fp_zero>
 94e:	b1 e0       	ldi	r27, 0x01	; 1
 950:	08 95       	ret
 952:	0c 94 60 05 	jmp	0xac0	; 0xac0 <__fp_zero>
 956:	67 2f       	mov	r22, r23
 958:	78 2f       	mov	r23, r24
 95a:	88 27       	eor	r24, r24
 95c:	b8 5f       	subi	r27, 0xF8	; 248
 95e:	39 f0       	breq	.+14     	; 0x96e <__fixunssfsi+0x4c>
 960:	b9 3f       	cpi	r27, 0xF9	; 249
 962:	cc f3       	brlt	.-14     	; 0x956 <__fixunssfsi+0x34>
 964:	86 95       	lsr	r24
 966:	77 95       	ror	r23
 968:	67 95       	ror	r22
 96a:	b3 95       	inc	r27
 96c:	d9 f7       	brne	.-10     	; 0x964 <__fixunssfsi+0x42>
 96e:	3e f4       	brtc	.+14     	; 0x97e <__fixunssfsi+0x5c>
 970:	90 95       	com	r25
 972:	80 95       	com	r24
 974:	70 95       	com	r23
 976:	61 95       	neg	r22
 978:	7f 4f       	sbci	r23, 0xFF	; 255
 97a:	8f 4f       	sbci	r24, 0xFF	; 255
 97c:	9f 4f       	sbci	r25, 0xFF	; 255
 97e:	08 95       	ret

00000980 <__floatunsisf>:
 980:	e8 94       	clt
 982:	09 c0       	rjmp	.+18     	; 0x996 <__floatsisf+0x12>

00000984 <__floatsisf>:
 984:	97 fb       	bst	r25, 7
 986:	3e f4       	brtc	.+14     	; 0x996 <__floatsisf+0x12>
 988:	90 95       	com	r25
 98a:	80 95       	com	r24
 98c:	70 95       	com	r23
 98e:	61 95       	neg	r22
 990:	7f 4f       	sbci	r23, 0xFF	; 255
 992:	8f 4f       	sbci	r24, 0xFF	; 255
 994:	9f 4f       	sbci	r25, 0xFF	; 255
 996:	99 23       	and	r25, r25
 998:	a9 f0       	breq	.+42     	; 0x9c4 <__floatsisf+0x40>
 99a:	f9 2f       	mov	r31, r25
 99c:	96 e9       	ldi	r25, 0x96	; 150
 99e:	bb 27       	eor	r27, r27
 9a0:	93 95       	inc	r25
 9a2:	f6 95       	lsr	r31
 9a4:	87 95       	ror	r24
 9a6:	77 95       	ror	r23
 9a8:	67 95       	ror	r22
 9aa:	b7 95       	ror	r27
 9ac:	f1 11       	cpse	r31, r1
 9ae:	f8 cf       	rjmp	.-16     	; 0x9a0 <__floatsisf+0x1c>
 9b0:	fa f4       	brpl	.+62     	; 0x9f0 <__floatsisf+0x6c>
 9b2:	bb 0f       	add	r27, r27
 9b4:	11 f4       	brne	.+4      	; 0x9ba <__floatsisf+0x36>
 9b6:	60 ff       	sbrs	r22, 0
 9b8:	1b c0       	rjmp	.+54     	; 0x9f0 <__floatsisf+0x6c>
 9ba:	6f 5f       	subi	r22, 0xFF	; 255
 9bc:	7f 4f       	sbci	r23, 0xFF	; 255
 9be:	8f 4f       	sbci	r24, 0xFF	; 255
 9c0:	9f 4f       	sbci	r25, 0xFF	; 255
 9c2:	16 c0       	rjmp	.+44     	; 0x9f0 <__floatsisf+0x6c>
 9c4:	88 23       	and	r24, r24
 9c6:	11 f0       	breq	.+4      	; 0x9cc <__floatsisf+0x48>
 9c8:	96 e9       	ldi	r25, 0x96	; 150
 9ca:	11 c0       	rjmp	.+34     	; 0x9ee <__floatsisf+0x6a>
 9cc:	77 23       	and	r23, r23
 9ce:	21 f0       	breq	.+8      	; 0x9d8 <__floatsisf+0x54>
 9d0:	9e e8       	ldi	r25, 0x8E	; 142
 9d2:	87 2f       	mov	r24, r23
 9d4:	76 2f       	mov	r23, r22
 9d6:	05 c0       	rjmp	.+10     	; 0x9e2 <__floatsisf+0x5e>
 9d8:	66 23       	and	r22, r22
 9da:	71 f0       	breq	.+28     	; 0x9f8 <__floatsisf+0x74>
 9dc:	96 e8       	ldi	r25, 0x86	; 134
 9de:	86 2f       	mov	r24, r22
 9e0:	70 e0       	ldi	r23, 0x00	; 0
 9e2:	60 e0       	ldi	r22, 0x00	; 0
 9e4:	2a f0       	brmi	.+10     	; 0x9f0 <__floatsisf+0x6c>
 9e6:	9a 95       	dec	r25
 9e8:	66 0f       	add	r22, r22
 9ea:	77 1f       	adc	r23, r23
 9ec:	88 1f       	adc	r24, r24
 9ee:	da f7       	brpl	.-10     	; 0x9e6 <__floatsisf+0x62>
 9f0:	88 0f       	add	r24, r24
 9f2:	96 95       	lsr	r25
 9f4:	87 95       	ror	r24
 9f6:	97 f9       	bld	r25, 7
 9f8:	08 95       	ret

000009fa <__fp_mintl>:
 9fa:	88 23       	and	r24, r24
 9fc:	71 f4       	brne	.+28     	; 0xa1a <__fp_mintl+0x20>
 9fe:	77 23       	and	r23, r23
 a00:	21 f0       	breq	.+8      	; 0xa0a <__fp_mintl+0x10>
 a02:	98 50       	subi	r25, 0x08	; 8
 a04:	87 2b       	or	r24, r23
 a06:	76 2f       	mov	r23, r22
 a08:	07 c0       	rjmp	.+14     	; 0xa18 <__fp_mintl+0x1e>
 a0a:	66 23       	and	r22, r22
 a0c:	11 f4       	brne	.+4      	; 0xa12 <__fp_mintl+0x18>
 a0e:	99 27       	eor	r25, r25
 a10:	0d c0       	rjmp	.+26     	; 0xa2c <__fp_mintl+0x32>
 a12:	90 51       	subi	r25, 0x10	; 16
 a14:	86 2b       	or	r24, r22
 a16:	70 e0       	ldi	r23, 0x00	; 0
 a18:	60 e0       	ldi	r22, 0x00	; 0
 a1a:	2a f0       	brmi	.+10     	; 0xa26 <__fp_mintl+0x2c>
 a1c:	9a 95       	dec	r25
 a1e:	66 0f       	add	r22, r22
 a20:	77 1f       	adc	r23, r23
 a22:	88 1f       	adc	r24, r24
 a24:	da f7       	brpl	.-10     	; 0xa1c <__fp_mintl+0x22>
 a26:	88 0f       	add	r24, r24
 a28:	96 95       	lsr	r25
 a2a:	87 95       	ror	r24
 a2c:	97 f9       	bld	r25, 7
 a2e:	08 95       	ret

00000a30 <__fp_mpack>:
 a30:	9f 3f       	cpi	r25, 0xFF	; 255
 a32:	31 f0       	breq	.+12     	; 0xa40 <__fp_mpack_finite+0xc>

00000a34 <__fp_mpack_finite>:
 a34:	91 50       	subi	r25, 0x01	; 1
 a36:	20 f4       	brcc	.+8      	; 0xa40 <__fp_mpack_finite+0xc>
 a38:	87 95       	ror	r24
 a3a:	77 95       	ror	r23
 a3c:	67 95       	ror	r22
 a3e:	b7 95       	ror	r27
 a40:	88 0f       	add	r24, r24
 a42:	91 1d       	adc	r25, r1
 a44:	96 95       	lsr	r25
 a46:	87 95       	ror	r24
 a48:	97 f9       	bld	r25, 7
 a4a:	08 95       	ret

00000a4c <__fp_split3>:
 a4c:	57 fd       	sbrc	r21, 7
 a4e:	90 58       	subi	r25, 0x80	; 128
 a50:	44 0f       	add	r20, r20
 a52:	55 1f       	adc	r21, r21
 a54:	59 f0       	breq	.+22     	; 0xa6c <__fp_splitA+0x10>
 a56:	5f 3f       	cpi	r21, 0xFF	; 255
 a58:	71 f0       	breq	.+28     	; 0xa76 <__fp_splitA+0x1a>
 a5a:	47 95       	ror	r20

00000a5c <__fp_splitA>:
 a5c:	88 0f       	add	r24, r24
 a5e:	97 fb       	bst	r25, 7
 a60:	99 1f       	adc	r25, r25
 a62:	61 f0       	breq	.+24     	; 0xa7c <__fp_splitA+0x20>
 a64:	9f 3f       	cpi	r25, 0xFF	; 255
 a66:	79 f0       	breq	.+30     	; 0xa86 <__fp_splitA+0x2a>
 a68:	87 95       	ror	r24
 a6a:	08 95       	ret
 a6c:	12 16       	cp	r1, r18
 a6e:	13 06       	cpc	r1, r19
 a70:	14 06       	cpc	r1, r20
 a72:	55 1f       	adc	r21, r21
 a74:	f2 cf       	rjmp	.-28     	; 0xa5a <__fp_split3+0xe>
 a76:	46 95       	lsr	r20
 a78:	f1 df       	rcall	.-30     	; 0xa5c <__fp_splitA>
 a7a:	08 c0       	rjmp	.+16     	; 0xa8c <__fp_splitA+0x30>
 a7c:	16 16       	cp	r1, r22
 a7e:	17 06       	cpc	r1, r23
 a80:	18 06       	cpc	r1, r24
 a82:	99 1f       	adc	r25, r25
 a84:	f1 cf       	rjmp	.-30     	; 0xa68 <__fp_splitA+0xc>
 a86:	86 95       	lsr	r24
 a88:	71 05       	cpc	r23, r1
 a8a:	61 05       	cpc	r22, r1
 a8c:	08 94       	sec
 a8e:	08 95       	ret

00000a90 <__fp_trunc>:
 a90:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__fp_splitA>
 a94:	a0 f0       	brcs	.+40     	; 0xabe <__fp_trunc+0x2e>
 a96:	be e7       	ldi	r27, 0x7E	; 126
 a98:	b9 17       	cp	r27, r25
 a9a:	88 f4       	brcc	.+34     	; 0xabe <__fp_trunc+0x2e>
 a9c:	bb 27       	eor	r27, r27
 a9e:	9f 38       	cpi	r25, 0x8F	; 143
 aa0:	60 f4       	brcc	.+24     	; 0xaba <__fp_trunc+0x2a>
 aa2:	16 16       	cp	r1, r22
 aa4:	b1 1d       	adc	r27, r1
 aa6:	67 2f       	mov	r22, r23
 aa8:	78 2f       	mov	r23, r24
 aaa:	88 27       	eor	r24, r24
 aac:	98 5f       	subi	r25, 0xF8	; 248
 aae:	f7 cf       	rjmp	.-18     	; 0xa9e <__fp_trunc+0xe>
 ab0:	86 95       	lsr	r24
 ab2:	77 95       	ror	r23
 ab4:	67 95       	ror	r22
 ab6:	b1 1d       	adc	r27, r1
 ab8:	93 95       	inc	r25
 aba:	96 39       	cpi	r25, 0x96	; 150
 abc:	c8 f3       	brcs	.-14     	; 0xab0 <__fp_trunc+0x20>
 abe:	08 95       	ret

00000ac0 <__fp_zero>:
 ac0:	e8 94       	clt

00000ac2 <__fp_szero>:
 ac2:	bb 27       	eor	r27, r27
 ac4:	66 27       	eor	r22, r22
 ac6:	77 27       	eor	r23, r23
 ac8:	cb 01       	movw	r24, r22
 aca:	97 f9       	bld	r25, 7
 acc:	08 95       	ret

00000ace <__mulsi3>:
 ace:	db 01       	movw	r26, r22
 ad0:	8f 93       	push	r24
 ad2:	9f 93       	push	r25
 ad4:	0e 94 99 05 	call	0xb32	; 0xb32 <__muluhisi3>
 ad8:	bf 91       	pop	r27
 ada:	af 91       	pop	r26
 adc:	a2 9f       	mul	r26, r18
 ade:	80 0d       	add	r24, r0
 ae0:	91 1d       	adc	r25, r1
 ae2:	a3 9f       	mul	r26, r19
 ae4:	90 0d       	add	r25, r0
 ae6:	b2 9f       	mul	r27, r18
 ae8:	90 0d       	add	r25, r0
 aea:	11 24       	eor	r1, r1
 aec:	08 95       	ret

00000aee <__udivmodsi4>:
 aee:	a1 e2       	ldi	r26, 0x21	; 33
 af0:	1a 2e       	mov	r1, r26
 af2:	aa 1b       	sub	r26, r26
 af4:	bb 1b       	sub	r27, r27
 af6:	fd 01       	movw	r30, r26
 af8:	0d c0       	rjmp	.+26     	; 0xb14 <__udivmodsi4_ep>

00000afa <__udivmodsi4_loop>:
 afa:	aa 1f       	adc	r26, r26
 afc:	bb 1f       	adc	r27, r27
 afe:	ee 1f       	adc	r30, r30
 b00:	ff 1f       	adc	r31, r31
 b02:	a2 17       	cp	r26, r18
 b04:	b3 07       	cpc	r27, r19
 b06:	e4 07       	cpc	r30, r20
 b08:	f5 07       	cpc	r31, r21
 b0a:	20 f0       	brcs	.+8      	; 0xb14 <__udivmodsi4_ep>
 b0c:	a2 1b       	sub	r26, r18
 b0e:	b3 0b       	sbc	r27, r19
 b10:	e4 0b       	sbc	r30, r20
 b12:	f5 0b       	sbc	r31, r21

00000b14 <__udivmodsi4_ep>:
 b14:	66 1f       	adc	r22, r22
 b16:	77 1f       	adc	r23, r23
 b18:	88 1f       	adc	r24, r24
 b1a:	99 1f       	adc	r25, r25
 b1c:	1a 94       	dec	r1
 b1e:	69 f7       	brne	.-38     	; 0xafa <__udivmodsi4_loop>
 b20:	60 95       	com	r22
 b22:	70 95       	com	r23
 b24:	80 95       	com	r24
 b26:	90 95       	com	r25
 b28:	9b 01       	movw	r18, r22
 b2a:	ac 01       	movw	r20, r24
 b2c:	bd 01       	movw	r22, r26
 b2e:	cf 01       	movw	r24, r30
 b30:	08 95       	ret

00000b32 <__muluhisi3>:
 b32:	0e 94 03 06 	call	0xc06	; 0xc06 <__umulhisi3>
 b36:	a5 9f       	mul	r26, r21
 b38:	90 0d       	add	r25, r0
 b3a:	b4 9f       	mul	r27, r20
 b3c:	90 0d       	add	r25, r0
 b3e:	a4 9f       	mul	r26, r20
 b40:	80 0d       	add	r24, r0
 b42:	91 1d       	adc	r25, r1
 b44:	11 24       	eor	r1, r1
 b46:	08 95       	ret

00000b48 <__umoddi3>:
 b48:	68 94       	set
 b4a:	01 c0       	rjmp	.+2      	; 0xb4e <__udivdi3_umoddi3>

00000b4c <__udivdi3>:
 b4c:	e8 94       	clt

00000b4e <__udivdi3_umoddi3>:
 b4e:	8f 92       	push	r8
 b50:	9f 92       	push	r9
 b52:	cf 93       	push	r28
 b54:	df 93       	push	r29
 b56:	0e 94 b2 05 	call	0xb64	; 0xb64 <__udivmod64>
 b5a:	df 91       	pop	r29
 b5c:	cf 91       	pop	r28
 b5e:	9f 90       	pop	r9
 b60:	8f 90       	pop	r8
 b62:	08 95       	ret

00000b64 <__udivmod64>:
 b64:	88 24       	eor	r8, r8
 b66:	99 24       	eor	r9, r9
 b68:	f4 01       	movw	r30, r8
 b6a:	e4 01       	movw	r28, r8
 b6c:	b0 e4       	ldi	r27, 0x40	; 64
 b6e:	9f 93       	push	r25
 b70:	aa 27       	eor	r26, r26
 b72:	9a 15       	cp	r25, r10
 b74:	8b 04       	cpc	r8, r11
 b76:	9c 04       	cpc	r9, r12
 b78:	ed 05       	cpc	r30, r13
 b7a:	fe 05       	cpc	r31, r14
 b7c:	cf 05       	cpc	r28, r15
 b7e:	d0 07       	cpc	r29, r16
 b80:	a1 07       	cpc	r26, r17
 b82:	98 f4       	brcc	.+38     	; 0xbaa <__udivmod64+0x46>
 b84:	ad 2f       	mov	r26, r29
 b86:	dc 2f       	mov	r29, r28
 b88:	cf 2f       	mov	r28, r31
 b8a:	fe 2f       	mov	r31, r30
 b8c:	e9 2d       	mov	r30, r9
 b8e:	98 2c       	mov	r9, r8
 b90:	89 2e       	mov	r8, r25
 b92:	98 2f       	mov	r25, r24
 b94:	87 2f       	mov	r24, r23
 b96:	76 2f       	mov	r23, r22
 b98:	65 2f       	mov	r22, r21
 b9a:	54 2f       	mov	r21, r20
 b9c:	43 2f       	mov	r20, r19
 b9e:	32 2f       	mov	r19, r18
 ba0:	22 27       	eor	r18, r18
 ba2:	b8 50       	subi	r27, 0x08	; 8
 ba4:	31 f7       	brne	.-52     	; 0xb72 <__udivmod64+0xe>
 ba6:	bf 91       	pop	r27
 ba8:	27 c0       	rjmp	.+78     	; 0xbf8 <__udivmod64+0x94>
 baa:	1b 2e       	mov	r1, r27
 bac:	bf 91       	pop	r27
 bae:	bb 27       	eor	r27, r27
 bb0:	22 0f       	add	r18, r18
 bb2:	33 1f       	adc	r19, r19
 bb4:	44 1f       	adc	r20, r20
 bb6:	55 1f       	adc	r21, r21
 bb8:	66 1f       	adc	r22, r22
 bba:	77 1f       	adc	r23, r23
 bbc:	88 1f       	adc	r24, r24
 bbe:	99 1f       	adc	r25, r25
 bc0:	88 1c       	adc	r8, r8
 bc2:	99 1c       	adc	r9, r9
 bc4:	ee 1f       	adc	r30, r30
 bc6:	ff 1f       	adc	r31, r31
 bc8:	cc 1f       	adc	r28, r28
 bca:	dd 1f       	adc	r29, r29
 bcc:	aa 1f       	adc	r26, r26
 bce:	bb 1f       	adc	r27, r27
 bd0:	8a 14       	cp	r8, r10
 bd2:	9b 04       	cpc	r9, r11
 bd4:	ec 05       	cpc	r30, r12
 bd6:	fd 05       	cpc	r31, r13
 bd8:	ce 05       	cpc	r28, r14
 bda:	df 05       	cpc	r29, r15
 bdc:	a0 07       	cpc	r26, r16
 bde:	b1 07       	cpc	r27, r17
 be0:	48 f0       	brcs	.+18     	; 0xbf4 <__udivmod64+0x90>
 be2:	8a 18       	sub	r8, r10
 be4:	9b 08       	sbc	r9, r11
 be6:	ec 09       	sbc	r30, r12
 be8:	fd 09       	sbc	r31, r13
 bea:	ce 09       	sbc	r28, r14
 bec:	df 09       	sbc	r29, r15
 bee:	a0 0b       	sbc	r26, r16
 bf0:	b1 0b       	sbc	r27, r17
 bf2:	21 60       	ori	r18, 0x01	; 1
 bf4:	1a 94       	dec	r1
 bf6:	e1 f6       	brne	.-72     	; 0xbb0 <__udivmod64+0x4c>
 bf8:	2e f4       	brtc	.+10     	; 0xc04 <__udivmod64+0xa0>
 bfa:	94 01       	movw	r18, r8
 bfc:	af 01       	movw	r20, r30
 bfe:	be 01       	movw	r22, r28
 c00:	cd 01       	movw	r24, r26
 c02:	00 0c       	add	r0, r0
 c04:	08 95       	ret

00000c06 <__umulhisi3>:
 c06:	a2 9f       	mul	r26, r18
 c08:	b0 01       	movw	r22, r0
 c0a:	b3 9f       	mul	r27, r19
 c0c:	c0 01       	movw	r24, r0
 c0e:	a3 9f       	mul	r26, r19
 c10:	70 0d       	add	r23, r0
 c12:	81 1d       	adc	r24, r1
 c14:	11 24       	eor	r1, r1
 c16:	91 1d       	adc	r25, r1
 c18:	b2 9f       	mul	r27, r18
 c1a:	70 0d       	add	r23, r0
 c1c:	81 1d       	adc	r24, r1
 c1e:	11 24       	eor	r1, r1
 c20:	91 1d       	adc	r25, r1
 c22:	08 95       	ret

00000c24 <_exit>:
 c24:	f8 94       	cli

00000c26 <__stop_program>:
 c26:	ff cf       	rjmp	.-2      	; 0xc26 <__stop_program>
